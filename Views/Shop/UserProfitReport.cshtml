@model IEnumerable<dynamic>
@{
    ViewData["Title"] = "User Profit Report";
    var topUsers = ViewBag.TopUsers as List<dynamic>;
    int totalUsers = ViewBag.TotalUsers ?? 0;
    decimal totalRevenue = ViewBag.TotalRevenue ?? 0m;
    decimal totalProfit = ViewBag.TotalProfit ?? 0m;
    decimal avgProfitMargin = ViewBag.AvgProfitMargin ?? 0m;
}

<!--
    USER PROFIT & SALES DASHBOARD
    -------------------------------------------------------------
    This page provides a visual and tabular summary of all user profits,
    including the top-performing users, total platform revenue,
    and an interactive chart comparing profit vs. spending.
-->
<!-- ==============================
     HEADER SECTION
     Displays title, subtitle, and last updated date
     ============================== -->
<div class="header-bar mb-4">
    <div class="container d-flex justify-content-between align-items-center">
        <div>
            <h2 class="fw-bold text-white mb-1">💼 User Profit & Sales Dashboard</h2>
            <p class="text-light mb-0">Overview of sales performance and top users by profit margin.</p>
        </div>
        <span class="badge bg-light text-dark">Updated: @DateTime.Now.ToString("dd MMM yyyy")</span>
    </div>
</div>

<!-- ==============================
     MAIN CONTENT
     ============================== -->
<div class="container fade-in my-5">

    <!-- ========== SUMMARY CARDS ========== -->
    <div class="row text-center mb-4">
        <!-- Total Users -->
        <div class="col-md-3 mb-3">
            <div class="summary-card border-primary">
                <div class="summary-icon text-primary"><i class="bi bi-people-fill"></i></div>
                <h6 class="text-muted mb-1">Total Users</h6>
                <h4 class="fw-bold text-primary">@totalUsers</h4>
            </div>
        </div>

        <!-- Total Revenue -->
        <div class="col-md-3 mb-3">
            <div class="summary-card border-success">
                <div class="summary-icon text-success"><i class="bi bi-currency-dollar"></i></div>
                <h6 class="text-muted mb-1">Total Revenue</h6>
                <h4 class="fw-bold text-success">$@totalRevenue.ToString("N2")</h4>
            </div>
        </div>

        <!-- Total Profit -->
        <div class="col-md-3 mb-3">
            <div class="summary-card border-warning">
                <div class="summary-icon text-warning"><i class="bi bi-graph-up-arrow"></i></div>
                <h6 class="text-muted mb-1">Total Profit</h6>
                <h4 class="fw-bold text-warning">$@totalProfit.ToString("N2")</h4>
            </div>
        </div>

        <!-- Average Profit Margin -->
        <div class="col-md-3 mb-3">
            <div class="summary-card border-info">
                <div class="summary-icon text-info"><i class="bi bi-percent"></i></div>
                <h6 class="text-muted mb-1">Avg. Profit Margin</h6>
                <h4 class="fw-bold text-info">@avgProfitMargin.ToString("N2")%</h4>
            </div>
        </div>
    </div>



    <!-- ========== PROFIT VS SPENT CHART ========== -->
    <h4 class="fw-bold mb-3 text-dark">📊 Profit vs Spent (Top 3 Users)</h4>
    <div class="bg-white border rounded-4 p-4 shadow-sm mb-5">
        <canvas id="profitChart" height="120"></canvas>
    </div>

    <!-- ========== DETAILED BREAKDOWN TABLE ========== -->
    <h4 class="fw-bold mb-3 text-dark">🧾 Detailed Profit Breakdown</h4>
    <div class="table-responsive rounded-3 shadow-sm">
        <table class="table table-hover align-middle mb-0">
            <thead class="table-dark">
                <tr>
                    <th>User ID</th>
                    <th>Email</th>
                    <th>Total Orders</th>
                    <th>Total Spent ($)</th>
                    <th>Total Profit ($)</th>
                    <th>Tier</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var u in Model)
                {
                    string tier = u.TotalProfit >= 10000 ? "Platinum" :
                    u.TotalProfit >= 5000 ? "Gold" :
                    u.TotalProfit >= 2000 ? "Silver" : "Bronze";

                    string tierClass = tier switch
                    {
                        "Platinum" => "badge bg-dark text-light",
                        "Gold" => "badge bg-warning text-dark",
                        "Silver" => "badge bg-secondary",
                        _ => "badge bg-danger"
                    };

                    <tr>
                        <td>@u.UserId</td>
                        <td>@u.Email</td>
                        <td>@u.Orders</td>
                        <td>$@u.TotalSpent.ToString("N2")</td>
                        <td class="text-success">$@u.TotalProfit.ToString("N2")</td>
                        <td><span class="@tierClass">@tier</span></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- ==============================
     CHART SCRIPT SECTION
     Generates bar chart for Top 3 users
     ============================== -->
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const chartCanvas = document.getElementById("profitChart");
            const users = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.TopUsers));

            if (users && users.length > 0) {
                const labels = users.map(u => u.email || u.Email);
                const profitData = users.map(u => u.totalProfit || u.TotalProfit);
                const spentData = users.map(u => u.totalSpent || u.TotalSpent);

                new Chart(chartCanvas, {
                    type: "bar",
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                label: "Total Profit ($)",
                                data: profitData,
                                backgroundColor: "rgba(25, 135, 84, 0.8)",
                                borderRadius: 6,
                            },
                            {
                                label: "Total Spent ($)",
                                data: spentData,
                                backgroundColor: "rgba(13, 110, 253, 0.8)",
                                borderRadius: 6,
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: "bottom",
                                labels: { color: "#000" }
                            }
                        },
                        scales: {
                            x: {
                                ticks: { color: "#000" },
                                grid: { color: "rgba(0,0,0,0.05)" }
                            },
                            y: {
                                ticks: {
                                    color: "#000",
                                    callback: (value) => "$" + value.toLocaleString()
                                },
                                grid: { color: "rgba(0,0,0,0.05)" }
                            }
                        }
                    }
                });
            } else {
                chartCanvas.parentElement.innerHTML =
                    `<div class='alert alert-warning text-center mt-3'>No data available.</div>`;
            }
        });
    </script>
}

<!-- ==============================
     PAGE STYLES
     ============================== -->
<style>
    body {
        background-color: #f4f6f9;
        font-family: 'Segoe UI', Roboto, sans-serif;
        color: #212529;
    }

    /* Header Bar */
    .header-bar {
        background: linear-gradient(90deg, #0d6efd, #20c997);
        color: #fff;
        padding: 25px 20px;
        border-radius: 0 0 20px 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
        position: sticky;
        top: 0;
        z-index: 10;
    }

    /* Summary Cards */
    .summary-card {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        padding: 15px;
        transition: all 0.2s ease;
    }

        .summary-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.12);
        }

    .summary-icon {
        font-size: 1.8rem;
        margin-bottom: 6px;
    }

    /* Tables */
    .table {
        background-color: #fff;
        border-radius: 10px;
        overflow: hidden;
    }

        .table th {
            background-color: #0d6efd;
            color: #fff;
            font-weight: 600;
        }

    .table-hover tbody tr:hover {
        background-color: #eef5ff;
        transition: 0.2s;
    }

    /* Alerts */
    .alert {
        border-radius: 8px;
        color: #000;
    }

    .alert-warning {
        background-color: #fff3cd;
        border: 1px solid #ffe69c;
    }

    /* Animation */
    .fade-in {
        animation: fadeIn 0.6s ease forwards;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
